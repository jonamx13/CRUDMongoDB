"""
Control de flujo para eliminaci√≥n de empleados
"""
from services.shared.input_utils import obtener_dato_numerico, obtener_dato_texto

def confirmar_eliminacion(empleado, collection):
    """
    Maneja la confirmaci√≥n de eliminaci√≥n de un empleado
    
    Args:
        empleado: Documento del empleado a eliminar
        collection: Colecci√≥n de MongoDB
        
    Returns:
        str: 'eliminado', 'cancelado_continuar' o 'cancelado_salir'
    """
    while True:
        print(f"\n‚ö†Ô∏è Vas a eliminar al empleado:")
        print(f"   ID: {empleado['empno']}")
        print(f"   Nombre: {empleado['ename']}")
        print(f"   Puesto: {empleado['job']}")
        print(f"   Salario: ${empleado['sal']:,.2f}")
        if 'departamento' in empleado:
            print(f"   Departamento: {empleado['departamento']['dname']} ({empleado['departamento']['loc']})")
        
        print("\n‚ö†Ô∏è Esta acci√≥n NO se puede deshacer.")
        confirmar = input("¬øEst√°s seguro de que quieres eliminar este empleado? (S/N/cancelar): ").strip().upper()
        
        if confirmar == 'S':
            # Proceder con eliminaci√≥n
            result = collection.delete_one({"empno": empleado['empno']})
            if result.deleted_count > 0:
                return 'eliminado'
            else:
                print("‚ùå No se pudo eliminar el empleado. Error interno.")
                return 'cancelado_salir'
                
        elif confirmar == 'N':
            print("‚ùå Eliminaci√≥n cancelada por el usuario.")
            opcion = obtener_opcion_despues_cancelar()
            if opcion == 'salir':
                return 'cancelado_salir'
            elif opcion == 'otro_empleado':
                return 'cancelado_continuar'
            elif opcion == 'confirmar_de_nuevo':
                continue  # Vuelve a mostrar la confirmaci√≥n del mismo empleado
                
        elif confirmar.lower() == 'cancelar':
            return 'cancelado_salir'
            
        else:
            print("‚ùå Opci√≥n no v√°lida. Escribe S (S√≠), N (No) o 'cancelar'")
            continue

def obtener_id_empleado(reintentos=3):
    """
    Obtiene el ID del empleado con validaci√≥n y reintentos
    
    Args:
        reintentos: N√∫mero m√°ximo de reintentos para entrada inv√°lida
        
    Returns:
        int: ID del empleado v√°lido o None si se cancela
    """
    for intento in range(reintentos):
        try:
            entrada = input("ID del empleado a eliminar: ").strip()
            
            if entrada.lower() == 'cancelar':
                return None
                
            if not entrada:
                print("‚ùå Debes ingresar un ID de empleado")
                if intento < reintentos - 1:
                    print(f"üîÑ Int√©ntalo de nuevo ({intento + 1}/{reintentos})")
                    print("üí° Escribe 'cancelar' para salir")
                continue
                
            empno = int(entrada)
            
            if empno <= 0:
                print("‚ùå El ID del empleado debe ser un n√∫mero positivo")
                if intento < reintentos - 1:
                    print(f"üîÑ Int√©ntalo de nuevo ({intento + 1}/{reintentos})")
                    print("üí° Escribe 'cancelar' para salir")
                continue
                
            return empno
            
        except ValueError:
            print("‚ùå Error: Debes ingresar un n√∫mero v√°lido")
            if intento < reintentos - 1:
                print(f"üîÑ Int√©ntalo de nuevo ({intento + 1}/{reintentos})")
                print("üí° Escribe 'cancelar' para salir")
            
    print("‚ùå Demasiados intentos fallidos.")
    opcion = obtener_opcion_reintento("demasiados intentos fallidos")
    if opcion == 'reintentar':
        return obtener_id_empleado(reintentos)  # Recursi√≥n para reiniciar
    else:
        return None

def obtener_opcion_reintento(razon):
    """
    Pregunta al usuario qu√© hacer despu√©s de un error
    
    Args:
        razon: Raz√≥n del error para mostrar en el mensaje
        
    Returns:
        str: 'reintentar' o 'cancelar'
    """
    print(f"\n‚ö†Ô∏è No se pudo proceder debido a: {razon}")
    print("¬øQu√© deseas hacer?")
    print("1. Intentar con otro ID")
    print("2. Cancelar operaci√≥n")
    
    while True:
        opcion = input("\nElige una opci√≥n (1-2): ").strip()
        
        if opcion == '1':
            return 'reintentar'
        elif opcion == '2':
            return 'cancelar'
        elif opcion.lower() == 'cancelar':
            return 'cancelar'
        else:
            print("‚ùå Opci√≥n no v√°lida. Elige 1 o 2")

def obtener_opcion_despues_cancelar():
    """
    Pregunta al usuario qu√© hacer despu√©s de cancelar la confirmaci√≥n
    
    Returns:
        str: 'salir', 'otro_empleado' o 'confirmar_de_nuevo'
    """
    print("\n¬øQu√© deseas hacer ahora?")
    print("1. Eliminar otro empleado")
    print("2. Volver a confirmar este mismo empleado")
    print("3. Salir de la operaci√≥n")
    
    while True:
        opcion = input("\nElige una opci√≥n (1-3): ").strip()
        
        if opcion == '1':
            return 'otro_empleado'
        elif opcion == '2':
            return 'confirmar_de_nuevo'
        elif opcion == '3':
            return 'salir'
        elif opcion.lower() == 'cancelar':
            return 'salir'
        else:
            print("‚ùå Opci√≥n no v√°lida. Elige 1, 2 o 3")

def preguntar_continuar():
    """
    Pregunta si el usuario quiere eliminar otro empleado despu√©s de una eliminaci√≥n exitosa
    
    Returns:
        bool: True si quiere continuar, False si quiere salir
    """
    print("¬øDeseas eliminar otro empleado?")
    print("1. S√≠, eliminar otro empleado")
    print("2. No, regresar al men√∫ principal")
    
    while True:
        opcion = input("\nElige una opci√≥n (1-2): ").strip()
        
        if opcion == '1':
            return True
        elif opcion == '2':
            return False
        elif opcion.lower() == 'cancelar':
            return False
        else:
            print("‚ùå Opci√≥n no v√°lida. Elige 1 o 2")